### remove ambient RNA using cellbender
# 25.4.22 Onur Basak
# For installation details, see: https://cellbender.readthedocs.io/en/latest/installation/index.html

# installation
conda create -n CellBender python=3.7
conda activate CellBender
# necessary:
conda install -c anaconda pytables
conda install pytorch torchvision -c pytorch 
#go to installation folder
cd /hpc/hers_basak/bin/software/

# Install CellBender
git clone https://github.com/broadinstitute/CellBender.git
pip install -e CellBender

#errors with installation...
#clear some space 
pip cache purge

#LB_LIB problem
#instead of using 
/hpc/hers_basak/bin/miniconda3/lib/libstdc++.so.6 #version CXXABI_1.3.9
# it uses:
/lib64/libstdc++.so.6 #version up to CXXABI_1.3.7
#fix
export LD_LIBRARY_PATH=/hpc/hers_basak/bin/miniconda3/lib:$LD_LIBRARY_PATH
#export LD_LIBRARY_PATH=/hpc/hers_basak/bin/miniconda3/lib:/hpc/local/CentOS7/hers_basak/lib #omit this
# seem to work

#got to the folder
cd /hpc/hers_basak/rnaseq_data/Basaklab/mapping/Cellbender_VTA/VTA_g003_mouse

## DONE ##

### Questions ###
# Is cellbender using multithreading? So far I am not sure. Try to run to code again with less tasks
# Is memory too much? Not sure, run using less memory
# Can I use a GPU on hpc? Do I need to register for this?? Ask hpc


### RUN CELLBENDER ###
# For usage details, see: https://cellbender.readthedocs.io/en/latest/usage/index.html

# First on the command line: (This will work for me, but not for others...)
export LD_LIBRARY_PATH=/home/wasiahmad/software/anaconda3/lib:$LD_LIBRARY_PATH
# Next time, integrate this in the code to make it useful for others

## VTA_g003_mouse
# There is a plateu with ~250 UMI reads per droplet
# This needs cleaning
# The ambient RNA plateu goes up to 75k or so.
# 79.4% of hte reads fall into 'cells'


# Almost ~8m/epoch, not worth doing it...


## VTA_g001_human
# The plateu is very low, with an average of 25 UMI per droplet. 
# I dont think we need to clean this up, following the advise on the website (50 seemed to be the cutoff)
# This plateu goes up to 60k cells
# 94.1% of hte reads fall into 'cells'

## VTA_g002_human
# The plateu is very low, with an average of 25-30 UMI per droplet. 
# I dont think we need to clean this up, following the advise on the website (50 seemed to be the cutoff)
# This plateu goes up to 70k cells
# 94.9% of hte reads fall into 'cells'

### g003 trials - these didnt work, usually took too long ###

## VTA_g003_mouse_cellbender.sh

#!/bin/bash
#SBATCH -t 04:00:00
#SBATCH --mem=128G
#SBATCH --cpus-per-task=16
#SBATCH -o log.out
#SBATCH -e errlog.out
#SBATCH --mail-type=ALL
#SBATCH --mail-user=o.basak@umcutrecht.nl
source /hpc/hers_basak/bin/miniconda3/etc/profile.d/conda.sh #these are not necessary for me...
conda activate CellBender
cellbender remove-background \
     --input /hpc/hers_basak/rnaseq_data/Basaklab/mapping/cellranger_VTA/first_run/VTA_g003_mouse_intron/outs/raw_feature_bc_matrix \
     --output ./VTA_g003_mouse_cellbender.h5 \
     --expected-cells 6000 \
     --total-droplets-included 80000

## END ##

## VTA_g003_mouse_cellbender_gpu.sh

#!/bin/bash
#SBATCH -t 12:00:00
#SBATCH --mem=20G
#SBATCH --gpus-per-task=1
#SBATCH -o cellbender_g003_gpu.out
#SBATCH -e cellbender_g003_gpu.err
#SBATCH --mail-type=ALL
#SBATCH --mail-user=o.basak@umcutrecht.nl
source /hpc/hers_basak/bin/miniconda3/etc/profile.d/conda.sh #these are not necessary for me...
conda activate CellBender
cellbender remove-background \
     --input /hpc/hers_basak/rnaseq_data/Basaklab/mapping/cellranger_VTA/first_run/VTA_g003_mouse_intron/outs/raw_feature_bc_matrix \
     --output ./VTA_g003_mouse_cellbender.h5 \
     --expected-cells 6000 \
     --total-droplets-included 80000 \
     --cuda \
     --fpr 0.01 \
     --epochs 150

## END ##

#ERROR: Invalid generic resource (gres) specification...
# Ask hpc


## VTA_g003_mouse_cellbender_2.sh

#!/bin/bash
#SBATCH -t 24:00:00
#SBATCH --mem=20G
#SBATCH --cpus-per-task=1
#SBATCH -o cellbender_g003.out
#SBATCH -e cellbender_g003.err
#SBATCH --mail-type=ALL
#SBATCH --mail-user=o.basak@umcutrecht.nl
source /hpc/hers_basak/bin/miniconda3/etc/profile.d/conda.sh
conda activate CellBender
cellbender remove-background \
     --input /hpc/hers_basak/rnaseq_data/Basaklab/mapping/cellranger_VTA/first_run/VTA_g003_mouse_intron/outs/raw_feature_bc_matrix \
     --output ./VTA_g003_mouse_cellbender.h5 \
     --expected-cells 6000 \
     --total-droplets-included 80000 \
     --fpr 0.01 \
     --epochs 150

## END ##

# Almost ~45m/epoch
# stopped

### THIS WORKED ! ###

## VTA_g003_mouse_cellbender_2.sh

#!/bin/bash
#SBATCH -t 72:00:00
#SBATCH --mem=128G
#SBATCH --cpus-per-task=8
#SBATCH -o cellbender_g003.out
#SBATCH -e cellbender_g003.err
#SBATCH --mail-type=ALL
#SBATCH --mail-user=o.basak@umcutrecht.nl
source /hpc/hers_basak/bin/miniconda3/etc/profile.d/conda.sh
conda activate CellBender
export LD_LIBRARY_PATH=/hpc/hers_basak/bin/miniconda3/lib:$LD_LIBRARY_PATH
cellbender remove-background \
     --input /hpc/hers_basak/rnaseq_data/Basaklab/mapping/cellranger_VTA/first_run/VTA_g003_mouse_intron/outs/raw_feature_bc_matrix \
     --output ./VTA_g003_mouse_cellbender.h5 \
     --expected-cells 6000 \
     --total-droplets-included 80000 \
     --fpr 0.01 \
     --epochs 150

## END ##

rsync -avzP hpct01:/hpc/hers_basak/rnaseq_data/Basaklab/mapping/Cellbender_VTA/VTA_g003_mouse /Users/onurbasak/Documents/1_BCRM/Basak_lab_space/data/Tiziana/RNAseq/post_RNAseq_results/To_share 

## process the rest ## 

cd /hpc/hers_basak/rnaseq_data/Basaklab/mapping/Cellbender_VTA

## VTA_mouse_cellbender.sh

#!/bin/bash
#SBATCH --mem=128G
#SBATCH --cpus-per-task=8
#SBATCH --array=0-3%2 # Replace here with the number of iterations (20, starts from 0) in the loop, in steps of 5
#SBATCH --time=72:00:00             # Time limit hrs:min:sec
#SBATCH --mail-type=ALL
#SBATCH --mail-user=o.basak@umcutrecht.nl
source /hpc/hers_basak/bin/miniconda3/etc/profile.d/conda.sh
conda activate CellBender
export LD_LIBRARY_PATH=/hpc/hers_basak/bin/miniconda3/lib:$LD_LIBRARY_PATH

RUNs=(g007
g008
g009
g010
) 

# here put what you would loop over
KSAMPLE=${RUNs[$SLURM_ARRAY_TASK_ID]}

cellbender remove-background \
     --input /hpc/hers_basak/rnaseq_data/Basaklab/data_SCDiscoveries/third_run/raw_files/UMC-AR-${KSAMPLE}-raw-feature-bc-matrix \
     --output ./VTA_${KSAMPLE}_mouse_cellbender.h5 \
     --expected-cells 6000 \
     --total-droplets-included 80000 \
     --fpr 0.01 \
     --epochs 50


## END ##

#### Human, previous rounds ###
### Anna/Onur ###
# The following can be skipped:
# folders: /hpc/hers_basak/rnaseq_data/Basaklab/mapping/cellranger_VTA/first_run/VTA_g001_human_intron/outs/raw_feature_bc_matrix
# folders: /hpc/hers_basak/rnaseq_data/Basaklab/mapping/cellranger_VTA/first_run/VTA_g002_human_intron/outs/raw_feature_bc_matrix

# files, older:
# /hpc/hers_basak/rnaseq_data/Basaklab/data_SCDiscoveries/second_run_human/raw/h5/UMC-AR-g004-raw_feature_bc_matrix.h5
# /hpc/hers_basak/rnaseq_data/Basaklab/data_SCDiscoveries/second_run_human/raw/h5/UMC-AR-g005-raw_feature_bc_matrix.h5

# VTA_human_cellbender_pt1.sh

#!/bin/bash
#SBATCH --mem=128G
#SBATCH --cpus-per-task=8
#SBATCH --array=0-1%2 # Replace here with the number of iterations (20, starts from 0) in the loop, in steps of 5
#SBATCH --time=72:00:00             # Time limit hrs:min:sec
#SBATCH --mail-type=ALL
#SBATCH --mail-user=o.basak@umcutrecht.nl
source /hpc/hers_basak/bin/miniconda3/etc/profile.d/conda.sh
conda activate CellBender
export LD_LIBRARY_PATH=/hpc/hers_basak/bin/miniconda3/lib:$LD_LIBRARY_PATH

RUNs=(g004 g005) 
EXPECTED_CELLS=(7000 9000)
DROPLETS_INCLUDED=(80000 80000)

# here put what you would loop over
KSAMPLE=${RUNs[$SLURM_ARRAY_TASK_ID]}
ESAMPLE=${EXPECTED_CELLS[$SLURM_ARRAY_TASK_ID]}
DSAMPLE=${DROPLETS_INCLUDED[$SLURM_ARRAY_TASK_ID]}

cellbender remove-background \
     --input /hpc/hers_basak/rnaseq_data/Basaklab/data_SCDiscoveries/second_run_human/raw/h5/UMC-AR-${KSAMPLE}-raw_feature_bc_matrix.h5 \
     --output ./VTA_${KSAMPLE}_human_cellbender.h5 \
     --expected-cells ${ESAMPLE} \
     --total-droplets-included ${DSAMPLE} \
     --fpr 0.01 \
     --epochs 50



#### Human, fourth round ###
### Anna ###
# folder: /hpc/hers_basak/rnaseq_data/Basaklab/Tiziana/fourth_run/raw/h5
# files: 
# UMC-AR-g011-raw_feature_bc_matrix.h5
# UMC-AR-g012-raw_feature_bc_matrix.h5
# UMC-AR-g013-raw_feature_bc_matrix.h5
# UMC-AR-g014-raw_feature_bc_matrix.h5

# VTA_human_cellbender_pt2.sh

#!/bin/bash
#SBATCH --mem=128G
#SBATCH --cpus-per-task=8
#SBATCH --array=0-3%4 # Replace here with the number of iterations (20, starts from 0) in the loop, in steps of 5
#SBATCH --time=72:00:00             # Time limit hrs:min:sec
#SBATCH --mail-type=ALL
#SBATCH --mail-user=o.basak@umcutrecht.nl
source /hpc/hers_basak/bin/miniconda3/etc/profile.d/conda.sh
conda activate CellBender
export LD_LIBRARY_PATH=/hpc/hers_basak/bin/miniconda3/lib:$LD_LIBRARY_PATH

RUNs=(g011 g012 g013 g014) 
EXPECTED_CELLS=(9300 2875 10800 5800)
DROPLETS_INCLUDED=(80000 30000 80000 80000)

# here put what you would loop over
KSAMPLE=${RUNs[$SLURM_ARRAY_TASK_ID]}
ESAMPLE=${EXPECTED_CELLS[$SLURM_ARRAY_TASK_ID]}
DSAMPLE=${DROPLETS_INCLUDED[$SLURM_ARRAY_TASK_ID]}

cellbender remove-background \
     --input /hpc/hers_basak/rnaseq_data/Basaklab/Tiziana/fourth_run/raw/h5/UMC-AR-${KSAMPLE}-raw_feature_bc_matrix.h5 \
     --output ./VTA_${KSAMPLE}_human_cellbender.h5 \
     --expected-cells ${ESAMPLE} \
     --total-droplets-included ${DSAMPLE} \
     --fpr 0.01 \
     --epochs 50



## END ##

## repeat g014

#!/bin/bash
#SBATCH -t 36:00:00
#SBATCH --mem=128G
#SBATCH --cpus-per-task=16
#SBATCH -o cellbender_g014_repeat.out
#SBATCH -e cellbender_g014_repeat.err
#SBATCH --mail-type=ALL
#SBATCH --mail-user=o.basak@umcutrecht.nl
source /hpc/hers_basak/bin/miniconda3/etc/profile.d/conda.sh
conda activate CellBender
export LD_LIBRARY_PATH=/hpc/hers_basak/bin/miniconda3/lib:$LD_LIBRARY_PATH
cellbender remove-background \
     --input /hpc/hers_basak/rnaseq_data/Basaklab/Tiziana/fourth_run/raw/h5/UMC-AR-g014-raw_feature_bc_matrix.h5 \
     --output ./VTA_g014_mouse_cellbender_repeat.h5 \
     --expected-cells 5800 \
     --total-droplets-included 90000 \
     --fpr 0.01 \
     --epochs 75


rsync -avzP gw2hpct01:/hpc/hers_basak/rnaseq_data/Basaklab/mapping/Cellbender_VTA/VTA_g007_mouse /Users/onurbasak/Documents/1_BCRM/Basak_lab_space/data/Tiziana/RNAseq/post_RNAseq_results/To_share/ 
rsync -avzP gw2hpct01:/hpc/hers_basak/rnaseq_data/Basaklab/mapping/Cellbender_VTA/VTA_g008_mouse /Users/onurbasak/Documents/1_BCRM/Basak_lab_space/data/Tiziana/RNAseq/post_RNAseq_results/To_share/ 


## New -> g018-g020 Sep 2022
# Write down the path
# check the html for cell numbers and empty droplets

#!/bin/bash
#SBATCH -t 36:00:00
#SBATCH --mem=128G
#SBATCH --cpus-per-task=16
#SBATCH -o cellbender_g018.out
#SBATCH -e cellbender_g018.err
#SBATCH --mail-type=ALL
#SBATCH --mail-user=o.basak@umcutrecht.nl
source /hpc/hers_basak/bin/miniconda3/etc/profile.d/conda.sh
conda activate CellBender
export LD_LIBRARY_PATH=/hpc/hers_basak/bin/miniconda3/lib:$LD_LIBRARY_PATH
cellbender remove-background \
     --input /hpc/hers_basak/rawdata/data_SCDiscoveries/Anna_Tiziana/2022_09_19_run6/umc-ar-20220919-g018-g020/h5/UMC-AR-g018-raw_feature_bc_matrix.h5 \
     --output /hpc/hers_basak/rnaseq_data/Basaklab/mapping/Cellbender_VTA/VTA_g018_human/VTA_g018_mouse_cellbender.h5 \
     --expected-cells 8800 \
     --total-droplets-included 65000 \
     --fpr 0.01 \
     --epochs 75

#!/bin/bash
#SBATCH -t 36:00:00
#SBATCH --mem=128G
#SBATCH --cpus-per-task=16
#SBATCH -o cellbender_g019.out
#SBATCH -e cellbender_g019.err
#SBATCH --mail-type=ALL
#SBATCH --mail-user=o.basak@umcutrecht.nl
source /hpc/hers_basak/bin/miniconda3/etc/profile.d/conda.sh
conda activate CellBender
export LD_LIBRARY_PATH=/hpc/hers_basak/bin/miniconda3/lib:$LD_LIBRARY_PATH
cellbender remove-background \
     --input /hpc/hers_basak/rawdata/data_SCDiscoveries/Anna_Tiziana/2022_09_19_run6/umc-ar-20220919-g018-g020/h5/UMC-AR-g019-raw_feature_bc_matrix.h5 \
     --output /hpc/hers_basak/rnaseq_data/Basaklab/mapping/Cellbender_VTA/VTA_g019_human/VTA_g019_mouse_cellbender.h5 \
     --expected-cells 9200 \
     --total-droplets-included 65000 \
     --fpr 0.01 \
     --epochs 75


#!/bin/bash
#SBATCH -t 36:00:00
#SBATCH --mem=128G
#SBATCH --cpus-per-task=16
#SBATCH -o cellbender_g020.out
#SBATCH -e cellbender_g020.err
#SBATCH --mail-type=ALL
#SBATCH --mail-user=o.basak@umcutrecht.nl
source /hpc/hers_basak/bin/miniconda3/etc/profile.d/conda.sh
conda activate CellBender
export LD_LIBRARY_PATH=/hpc/hers_basak/bin/miniconda3/lib:$LD_LIBRARY_PATH
cellbender remove-background \
     --input /hpc/hers_basak/rawdata/data_SCDiscoveries/Anna_Tiziana/2022_09_19_run6/umc-ar-20220919-g018-g020/h5/UMC-AR-g020-raw_feature_bc_matrix.h5 \
     --output /hpc/hers_basak/rnaseq_data/Basaklab/mapping/Cellbender_VTA/VTA_g020_human/VTA_g020_mouse_cellbender.h5 \
     --expected-cells 9300 \
     --total-droplets-included 65000 \
     --fpr 0.01 \
     --epochs 75



## THE following methods gave an error ##
## Fix the problem of reading
# https://github.com/broadinstitute/CellBender/issues/57
import scanpy as sc
import pandas as pd
import numpy as np
# define the function
def readCellbenderH5(filename):
    import h5py
    import scanpy as sc
    import scipy
    f = h5py.File(filename, 'r')
    mat=f['matrix']
    cols=['latent_cell_probability','latent_RT_efficiency'] #,"latent_dirichlet_precision"]
    obsdict={x:mat[x] for x in cols}
    ad=sc.AnnData(X=scipy.sparse.csr_matrix((mat['data'][:], 
                                          mat['indices'][:], 
                                          mat['indptr'][:]),
                                        shape=(mat['shape'][1],mat['shape'][0])),
              var=pd.DataFrame(dict(mat['features'])),
              obs=pd.DataFrame(obsdict,index=[x.decode('ascii') for x in mat['barcodes']]),
                uns={'test_elbo':list(mat['test_elbo']),'test_epoch':list(mat['test_epoch'])})
    ad.var.index=[x.decode('ascii') for x in ad.var['name']]
    return(ad)

file = readCellbenderH5(orig_h5)

### THE FOLLOWING DIDNT WORK, TOO MANY CELL ##
#
import tables
import numpy as np
orig_h5 = 'VTA_g010_mouse_cellbender_filtered.h5'
fixed_h5 = 'VTA_g010_mouse_cellbender_filtered_mod.h5'
tables.copy_file(orig_h5, fixed_h5)
with tables.open_file(fixed_h5, "r+") as f:
    n = f.get_node("/matrix/features")
    n_genes = f.get_node("/matrix/shape")[0]
    if "genome" not in n:
        f.create_array(n, "genome", np.repeat("mm10", n_genes))

tables.copy_file(orig_h5, fixed_h5)
with tables.open_file(fixed_h5, "r+") as f:
    n = f.get_node("/matrix/features")
    n_genes = f.get_node("/matrix/shape")[0]
    if "genome" not in n:
        f.create_array(n, "genome", np.repeat("GRCh38", n_genes))

# Now load the data using:
file = sc.read_10x_h5(fixed_h5)


#... It has way too many cells!!

# For others
orig_h5 = '../VTA_g003_mouse/VTA_g010_mouse_cellbender_filtered.h5'
fixed_h5 = '../VTA_g003_mouse/VTA_g010_mouse_cellbender_filtered_mod.h5'

orig_h5 = '../VTA_g007_mouse/VTA_g010_mouse_cellbender_filtered.h5'
fixed_h5 = '../VTA_g007_mouse/VTA_g010_mouse_cellbender_filtered_mod.h5'

orig_h5 = '../VTA_g008_mouse/VTA_g010_mouse_cellbender_filtered.h5'
fixed_h5 = '../VTA_g008_mouse/VTA_g010_mouse_cellbender_filtered_mod.h5'

orig_h5 = '../VTA_g009_mouse/VTA_g010_mouse_cellbender_filtered.h5'
fixed_h5 = '../VTA_g009_mouse/VTA_g010_mouse_cellbender_filtered_mod.h5'


###

"""Functions for downstream work with outputs of remove-background."""

import tables
import numpy as np
import scipy.sparse as sp
from typing import Dict


def dict_from_h5(file: str) -> Dict[str, np.ndarray]:
    """Read in everything from an h5 file and put into a dictionary."""
    d = {}
    with tables.open_file(file) as f:
        # read in everything
        for array in f.walk_nodes("/", "Array"):
            d[array.name] = array.read()
    return d


def anndata_from_h5(file: str,
     analyzed_barcodes_only: bool = True) -> 'anndata.AnnData':
     """Load an output h5 file into an AnnData object for downstream work.
    Args:
        file: The h5 file
        analyzed_barcodes_only: False to load all barcodes, so that the size of
            the AnnData object will match the size of the input raw count matrix.
            True to load a limited set of barcodes: only those analyzed by the
            algorithm. This allows relevant latent variables to be loaded
            properly into adata.obs and adata.obsm, rather than adata.uns.

    Returns:
        adata: The anndata object, populated with inferred latent variables
            and metadata.

    """
    try:
        import anndata
    except ImportError:
        raise ImportError('The anndata package must be installed to use the '
                          'function anndata_from_h5()')

    d = dict_from_h5(file)
    X = sp.csc_matrix((d.pop('data'), d.pop('indices'), d.pop('indptr')),
                      shape=d.pop('shape')).transpose().tocsr()
    if analyzed_barcodes_only:
        if 'barcodes_analyzed_inds' in d.keys():
            X = X[d['barcodes_analyzed_inds'], :]
            d['barcodes'] = d['barcodes'][d['barcodes_analyzed_inds']]
        elif 'barcode_indices_for_latents' in d.keys():
            X = X[d['barcode_indices_for_latents'], :]
            d['barcodes'] = d['barcodes'][d['barcode_indices_for_latents']]
        else:
            print('Warning: analyzed_barcodes_only=True, but the key '
                  '"barcodes_analyzed_inds" or "barcode_indices_for_latents" '
                  'is missing from the h5 file. '
                  'Will output all barcodes, and proceed as if '
                  'analyzed_barcodes_only=False')
    # Construct the count matrix.
    adata = anndata.AnnData(X=X,
                            obs={'barcode': d.pop('barcodes').astype(str)},
                            var={'gene_name': (d.pop('gene_names') if 'gene_names' in d.keys()
                                               else d.pop('name')).astype(str)})
    adata.obs.set_index('barcode', inplace=True)
    adata.var.set_index('gene_name', inplace=True)

    # Add other information to the adata object in the appropriate slot.
    for key, value in d.items():
        try:
            value = np.asarray(value)
            if len(value.shape) == 0:
                adata.uns[key] = value
            elif value.shape[0] == X.shape[0]:
                if (len(value.shape) < 2) or (value.shape[1] < 2):
                    adata.obs[key] = value
                else:
                    adata.obsm[key] = value
            elif value.shape[0] == X.shape[1]:
                if value.dtype.name.startswith('bytes'):
                    adata.var[key] = value.astype(str)
                else:
                    adata.var[key] = value
            else:
                adata.uns[key] = value
        except Exception:
            print('Unable to load data into AnnData: ', key, value, type(value))

    if analyzed_barcodes_only:
        for col in adata.obs.columns[adata.obs.columns.str.startswith('barcodes_analyzed')
                                     | adata.obs.columns.str.startswith('barcode_indices')]:
            try:
                del adata.obs[col]
            except Exception:
                pass
    return adata


def load_anndata_from_input_and_output(input_file: str,
                                       output_file: str,
                                       analyzed_barcodes_only: bool = True,
                                       input_layer_key: str = 'cellranger') -> 'anndata.AnnData':
    """Load remove-background output count matrix into an anndata object,
    together with remove-background metadata and the raw input counts.

    Args:
        input_file: Raw h5 file used as input for remove-background.
        output_file: Output h5 file created by remove-background (can be
            filtered or not).
        analyzed_barcodes_only: Argument passed to anndata_from_h5().
            False to load all barcodes, so that the size of
            the AnnData object will match the size of the input raw count matrix.
            True to load a limited set of barcodes: only those analyzed by the
            algorithm. This allows relevant latent variables to be loaded
            properly into adata.obs and adata.obsm, rather than adata.uns.
        input_layer_key: Key of the anndata.layer that is created for the raw
            input count matrix.

    Return:
        adata_out: AnnData object with counts before and after remove-background,
            as well as inferred latent variables from remove-background.

    """

    # Load input data.
    adata_raw = anndata_from_h5(input_file, analyzed_barcodes_only=False)

    # Load remove-background output data.
    adata_out = anndata_from_h5(output_file, analyzed_barcodes_only=analyzed_barcodes_only)

    # Subset the raw dataset to the relevant barcodes.
    adata_raw = adata_raw[adata_out.obs.index]

    # Put count matrices into 'layers' in anndata for clarity.
    adata_out.layers[input_layer_key] = adata_raw.X.copy()
    adata_out.layers['cellbender'] = adata_out.X.copy()

    # Pre-compute a bit of metadata.
    adata_out.var['n_cellranger'] = np.array(adata_out.layers['cellranger'].sum(axis=0)).squeeze()
    adata_out.var['n_cellbender'] = np.array(adata_out.layers['cellbender'].sum(axis=0)).squeeze()

    return adata_out
